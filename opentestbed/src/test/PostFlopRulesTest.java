package test;

import bots.demobots.AlwaysCallBot;
import bots.rulebasedbot.*;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.Hand;
import com.biotools.meerkat.Holdem;
import game.PublicGameInfo;
import game.PublicPlayerInfo;
import org.junit.BeforeClass;
import org.junit.Test;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

import static org.junit.Assert.*;

public class PostFlopRulesTest {

    static KieContainer kieContainer;
    static PublicGameInfo gameInfo;
    KieSession kSession = null;

    @BeforeClass
    public static void beforeClass() {
        kieContainer = Utility.createRuleBase();
        gameInfo = new PublicGameInfo();
        gameInfo.setNumSeats(6);
        gameInfo.setPlayer(0, PublicPlayerInfo.create("player0", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(1, PublicPlayerInfo.create("player1", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(2, PublicPlayerInfo.create("player2", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(3, PublicPlayerInfo.create("player3", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(4, PublicPlayerInfo.create("player4", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(5, PublicPlayerInfo.create("player5", 200, new AlwaysCallBot()));
        gameInfo.setBlinds(0.05, 0.10);

        Hand cardsToAddToBoard = new Hand();
        cardsToAddToBoard.addCard(new Card(Card.ACE, Card.SPADES));
        cardsToAddToBoard.addCard(new Card(Card.TEN, Card.DIAMONDS));
        cardsToAddToBoard.addCard(new Card(Card.THREE, Card.HEARTS));
        gameInfo.setBoard(cardsToAddToBoard);
    }

    @Test
    public void testCalculatingHandRank() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setStage(Holdem.FLOP);
        setPostFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        PostFlopParameters pfp = new PostFlopParameters(0, 0, 0, 0, true);
        kSession.insert(pfp);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertNotEquals(ps.getResults().getEHS(), 0.0);
        assertTrue(ps.getResults().isCalculated());
        assertFalse(pfp.isSemiBluffingFlag());
    }

    @Test
    public void testStrategyMAKE2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setStage(Holdem.FLOP);
        setPostFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        PostFlopParameters pfp = new PostFlopParameters(0, 0, 0, 0, true);
        kSession.insert(pfp);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.MAKE2, ps.getStrategy());
        assertTrue(ps.getActionToTake().isBetOrRaise());
    }

    @Test
    public void testStrategyMAKE1() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setStage(Holdem.FLOP);
        setPostFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.EIGHT, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        PostFlopParameters pfp = new PostFlopParameters(0, 0, 0, 0, true);
        kSession.insert(pfp);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.MAKE1, ps.getStrategy());
        assertTrue(ps.getActionToTake().isBet());
    }

    @Test
    public void testSemiBluffingAlternative() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setStage(Holdem.FLOP);
        setPostFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.EIGHT, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.MAKE4, false, PlayStyle.MODERATE, null);
        PostFlopParameters pfp = new PostFlopParameters(0, 0, 0, 0, true);
        kSession.insert(pfp);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertTrue(ps.getActionToTake().isCheck());
    }

    private void setPostFlopGlobals() {
        kSession.setGlobal("make1PostFlopThreshold", 0.5);
        kSession.setGlobal("make2PostFlopThreshold", 0.85);
        kSession.setGlobal("gameInfo", gameInfo);
        kSession.setGlobal("phase", -1);
    }
}
