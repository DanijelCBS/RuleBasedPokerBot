package test;

import bots.demobots.AlwaysCallBot;
import bots.rulebasedbot.*;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.Holdem;
import game.PublicGameInfo;
import game.PublicPlayerInfo;
import org.junit.BeforeClass;
import org.junit.Test;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class PreFlopRulesTest {

    static KieContainer kieContainer;
    static PublicGameInfo gameInfo;
    KieSession kSession = null;

    @BeforeClass
    public static void beforeClass() {
        kieContainer = Utility.createRuleBase();
        gameInfo = new PublicGameInfo();
        gameInfo.setNumSeats(6);
        gameInfo.setPlayer(0, PublicPlayerInfo.create("player0", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(1, PublicPlayerInfo.create("player1", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(2, PublicPlayerInfo.create("player2", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(3, PublicPlayerInfo.create("player3", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(4, PublicPlayerInfo.create("player4", 200, new AlwaysCallBot()));
        gameInfo.setPlayer(5, PublicPlayerInfo.create("player5", 200, new AlwaysCallBot()));
        gameInfo.setBlinds(0.05, 0.10);
    }

    @Test
    public void testDetermineSuits() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertTrue(ps.isSameSuit());
    }

    @Test
    public void testStartingHandRankSameSuit5plus() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 5, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);

        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 644L);
    }

    @Test
    public void testStartingHandRankDifferentSuit5plus() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 5, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 373L);
    }

    @Test
    public void testStartingHandRankSameSuit3or4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 491L);
    }

    @Test
    public void testStartingHandRankDifferentSuit3or4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 354L);
    }

    @Test
    public void testStartingHandRankSameSuit1or2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 1, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 291L);
    }

    @Test
    public void testStartingHandRankDifferentSuit1or2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 1, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(ps.getIR().longValue(), 254L);
    }

    @Test
    public void testThresholdsTight1or2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 1, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.TIGHT, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 50);
        assertEquals(thresholds.getCall2Threshold(), 250);
        assertEquals(thresholds.getMake1Threshold(), 50);
        assertEquals(thresholds.getMake2Threshold(), 250);
        assertEquals(thresholds.getMake4Threshold(), 300);
    }

    @Test
    public void testThresholdsTight3or4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.TIGHT, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 150);
        assertEquals(thresholds.getCall2Threshold(), 300);
        assertEquals(thresholds.getMake1Threshold(), 150);
        assertEquals(thresholds.getMake2Threshold(), 300);
        assertEquals(thresholds.getMake4Threshold(), 580);
    }

    @Test
    public void testThresholdsTight5plus() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 5, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.TIGHT, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 140);
        assertEquals(thresholds.getCall2Threshold(), 550);
        assertEquals(thresholds.getMake1Threshold(), 140);
        assertEquals(thresholds.getMake2Threshold(), 550);
        assertEquals(thresholds.getMake4Threshold(), 900);
    }

    @Test
    public void testThresholdsModerate1or2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 1, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 50);
        assertEquals(thresholds.getCall2Threshold(), 150);
        assertEquals(thresholds.getMake1Threshold(), 50);
        assertEquals(thresholds.getMake2Threshold(), 150);
        assertEquals(thresholds.getMake4Threshold(), 300);
    }

    @Test
    public void testThresholdsModerate3or4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 100);
        assertEquals(thresholds.getCall2Threshold(), 250);
        assertEquals(thresholds.getMake1Threshold(), 100);
        assertEquals(thresholds.getMake2Threshold(), 250);
        assertEquals(thresholds.getMake4Threshold(), 580);
    }

    @Test
    public void testThresholdsModerate5plus() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 5, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 100);
        assertEquals(thresholds.getCall2Threshold(), 500);
        assertEquals(thresholds.getMake1Threshold(), 100);
        assertEquals(thresholds.getMake2Threshold(), 500);
        assertEquals(thresholds.getMake4Threshold(), 900);
    }

    @Test
    public void testThresholdsLoose1or2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 1, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.LOOSE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 50);
        assertEquals(thresholds.getCall2Threshold(), 0);
        assertEquals(thresholds.getMake1Threshold(), 50);
        assertEquals(thresholds.getMake2Threshold(), 0);
        assertEquals(thresholds.getMake4Threshold(), 300);
    }

    @Test
    public void testThresholdsLoose3or4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.LOOSE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 70);
        assertEquals(thresholds.getCall2Threshold(), 220);
        assertEquals(thresholds.getMake1Threshold(), 70);
        assertEquals(thresholds.getMake2Threshold(), 220);
        assertEquals(thresholds.getMake4Threshold(), 580);
    }

    @Test
    public void testThresholdsLoose5plus() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 5, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.LOOSE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(thresholds.getCall1Threshold(), 60);
        assertEquals(thresholds.getCall2Threshold(), 470);
        assertEquals(thresholds.getMake1Threshold(), 60);
        assertEquals(thresholds.getMake2Threshold(), 470);
        assertEquals(thresholds.getMake4Threshold(), 900);
    }

    @Test
    public void testStrategyMAKE4() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setStage(Holdem.FLOP);
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.KING, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 2, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.LOOSE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.MAKE4, ps.getStrategy());
        assertTrue(ps.getActionToTake().isBetOrRaise());
    }

    @Test
    public void testStrategyMAKE2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.TEN, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 2, false, -500,
                Strategy.NO_STRATEGY, false, PlayStyle.LOOSE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.MAKE2, ps.getStrategy());
        assertTrue(ps.getActionToTake().isBetOrRaise());
    }

    @Test
    public void testStrategyCALL2() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.THREE, Card.SPADES);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, true, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.CALL2, ps.getStrategy());
        assertTrue(ps.getActionToTake().isCall());
    }

    @Test
    public void testStrategyCALL1() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.ACE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.THREE, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, true, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.CALL1, ps.getStrategy());
        assertTrue(ps.getActionToTake().isCheckOrCall());
    }

    @Test
    public void testStrategyMAKE1() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.NINE, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.KING, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, true, PlayStyle.TIGHT, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        System.out.println(ps.getActionToTake());
        assertEquals(Strategy.MAKE1, ps.getStrategy());
        assertTrue(ps.getActionToTake().isCall());
    }

    @Test
    public void testStrategyMAKE0() {
        kSession = Utility.getStatefulKnowledgeSession(kieContainer, "ksession-rules");
        gameInfo.setNumRaises(3);
        setPreFlopGlobals();
        Card c1 = new Card();
        c1.setCard(Card.TWO, Card.SPADES);
        Card c2 = new Card();
        c2.setCard(Card.THREE, Card.DIAMONDS);
        PlayerState ps = new PlayerState(c1, c2, 3, 3, false, -500,
                Strategy.NO_STRATEGY, true, PlayStyle.MODERATE, null);
        Thresholds thresholds = new Thresholds(0, 0, 0, 0, 0);

        kSession.insert(thresholds);
        kSession.insert(ps);

        kSession.getAgenda().getAgendaGroup("MAIN").setFocus();
        kSession.fireAllRules();

        assertEquals(Strategy.MAKE0, ps.getStrategy());
        assertTrue(ps.getActionToTake().isCheckOrCall());

        gameInfo.setNumRaises(1);
    }

    private void setPreFlopGlobals() {
        kSession.setGlobal("numOfPlayersToAct", 2);
        kSession.setGlobal("gameInfo", gameInfo);
        kSession.setGlobal("phase", 1);
    }
}
