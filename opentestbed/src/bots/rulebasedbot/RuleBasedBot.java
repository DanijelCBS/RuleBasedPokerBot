package bots.rulebasedbot;

import com.biotools.meerkat.Action;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.GameInfo;
import com.biotools.meerkat.Player;
import com.biotools.meerkat.util.Preferences;
import org.drools.core.base.RuleNameEndsWithAgendaFilter;
import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

public class RuleBasedBot implements Player {

    private int ourSeat; // our seat for the current hand
    private Card c1, c2; // our hole cards
    private GameInfo gi; // general game information
    private Preferences prefs; // the configuration options for this bot
    private PlayStyle playStyle;
    private Boolean semiBluffingFlag;

    private KieServices ks;
    private KieContainer kContainer;
    private KieSession kSession;

    public RuleBasedBot() {
        ks = KieServices.Factory.get();
        kContainer = ks.getKieClasspathContainer();
        kSession = kContainer.newKieSession("ksession-rules");
        BettingEvent be1 = new BettingEvent(HandStrengthEnum.THIRTY_TO_FORTY, false);
        BettingEvent be2 = new BettingEvent(HandStrengthEnum.FORTY_TO_FIFTY, false);
        BettingEvent be3 = new BettingEvent(HandStrengthEnum.FIFTY_TO_SIXTY, false);
        kSession.insert(be1);
        kSession.insert(be2);
        kSession.insert(be3);
        playStyle = PlayStyle.MODERATE;
        semiBluffingFlag = false;
    }

    @Override
    public void init(Preferences preferences) {
        this.prefs = preferences;
    }

    @Override
    public void holeCards(Card c1, Card c2, int seat) {
        this.c1 = c1;
        this.c2 = c2;
        this.ourSeat = seat;
    }

    public Preferences getPreferences() {
        return prefs;
    }

    @Override
    public Action getAction() {
        if (gi.isPreFlop()) {
            setPreFlopGlobals();
            boolean smallBlind = gi.getSmallBlindSeat() == ourSeat;
            int expectedNumOfPlayers = (int) Math
                    .round(gi.getNumActivePlayers() - gi.getNumToAct() + 0.6 * gi.getNumToAct());
            PlayerState ps = new PlayerState(c1, c2, ourSeat, expectedNumOfPlayers, false, -500,
                    Strategy.NO_STRATEGY, smallBlind, playStyle, null);
            kSession.insert(ps);

            kSession.fireAllRules(new RuleNameEndsWithAgendaFilter("pre-flop"));
            return ps.getActionToTake();
        } else {
            setPostFlopGlobals();
            PlayerState ps = new PlayerState(c1, c2, ourSeat, 0, false, -500,
                    Strategy.NO_STRATEGY, false, playStyle, null);
            kSession.insert(ps);

            kSession.fireAllRules(new RuleNameEndsWithAgendaFilter("post-flop"));
            semiBluffingFlag = (Boolean) kSession.getGlobal("semiBluffingFlag");
            return ps.getActionToTake();
        }
    }

    private void setPreFlopGlobals() {
        kSession.setGlobal("make1Threshold", 0);
        kSession.setGlobal("make2Threshold", 0);
        kSession.setGlobal("make4Threshold", 0);
        kSession.setGlobal("call1Threshold", 0);
        kSession.setGlobal("call2Threshold", 0);
        kSession.setGlobal("numOfPlayersToAct", gi.getSmallBlindSeat() >= ourSeat ? gi
                .getSmallBlindSeat() - ourSeat : gi.getNumToAct() + gi.getSmallBlindSeat() - 1);
        kSession.setGlobal("gameInfo", gi);
    }

    private void setPostFlopGlobals() {
        kSession.setGlobal("make1PostFlopThreshold", 0.5);
        kSession.setGlobal("make2PostFlopThreshold", 0.85);
        kSession.setGlobal("potOdds", 0.0);
        kSession.setGlobal("potOdds2", 0.0);
        kSession.setGlobal("showdownCost", 0.0);
        kSession.setGlobal("showdownOdds", 0.0);
        kSession.setGlobal("semiBluffingFlag", semiBluffingFlag);
        kSession.setGlobal("gameInfo", gi);
    }

    @Override
    public void actionEvent(int i, Action action) {
        System.out.println("Action seat: " + i);
        System.out.println("Action: " + action.toString());
    }

    @Override
    public void stageEvent(int i) {
        System.out.println("Stage event: " + i);
    }

    @Override
    public void showdownEvent(int i, Card card, Card card1) {
        System.out.println("Seat: " + i);
        System.out.println("Card1: " + card);
        System.out.println("Card2: " + card1);
    }

    @Override
    public void gameStartEvent(GameInfo gameInfo) {
        this.gi = gameInfo;
    }

    @Override
    public void dealHoleCardsEvent() {
        System.out.println("Dealing hole cards");
    }

    @Override
    public void gameOverEvent() {

    }

    @Override
    public void winEvent(int i, double v, String s) {
        System.out.println("Seat: " + i);
        System.out.println("Amount: " + v);
        System.out.println("Result: " + s);
    }

    @Override
    public void gameStateChanged() {
        System.out.println("State changed");
    }

    public boolean getDebug() {
        return prefs.getBooleanPreference("DEBUG", false);
    }

    public void debug(String str) {
        if (getDebug()) {
            System.out.println(str);
        }
    }
}
