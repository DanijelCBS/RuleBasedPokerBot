package rules

import com.biotools.meerkat.Card;
import com.biotools.meerkat.Action;
import com.biotools.meerkat.GameInfo;
import bots.rulebasedbot.Utility;
import bots.rulebasedbot.PlayerState;
import bots.rulebasedbot.PlayStyle;
import bots.rulebasedbot.Strategy;
import com.biotools.meerkat.Holdem;
import bots.rulebasedbot.BettingEvent;
import bots.rulebasedbot.HandStrengthEnum;
import bots.rulebasedbot.PostFlopParameters;

global Double make1PostFlopThreshold;
global Double make2PostFlopThreshold;
global Integer phase;
global GameInfo gameInfo;


rule "Calculate potentials and hand rank"
    salience -100*phase
    when
        $ps: PlayerState($card1: card1, $card2: card2, !results.isCalculated(), actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setResults(Utility.enumerateHands($card1, $card2, gameInfo))
        }
end

rule "Reset semi-bluffing flag"
    salience -100*phase
    when
        $ps: PlayerState($card1: card1, $card2: card2, (gameInfo.getStage() == Holdem.FLOP || gameInfo.getBetsToCall(seat) > 0), actionToTake == null)
        $pfp: PostFlopParameters()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($pfp) {
            setSemiBluffingFlag(false)
        }
end

rule "Strategy MAKE2 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, results.getEHS() >= make2PostFlopThreshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.MAKE2)
        }
end

rule "Strategy MAKE1 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, results.getEHS() >= make1PostFlopThreshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.MAKE1)
        }
end

rule "Determine action - strategy MAKE2 - scenario 1 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE2, gameInfo.getNumRaises() < 2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.raiseAction(gameInfo, gameInfo.getCurrentBetSize()))
        }
end

rule "Determine action - strategy MAKE2 - scenario 2 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE2, gameInfo.getBetsToCall(seat) >= 2, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 1 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) >= 2, gameInfo.isCommitted(seat) == false,
            actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 2 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, actionToTake == null, gameInfo.getBetsToCall(seat) < 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 3 post-flop"
    salience -100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) == 0, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.betAction(gameInfo))
        }
end

rule "Process 50-60 betting event scenario 1"
    salience -100*phase
    when
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.FIFTY_TO_SIXTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.FIFTY_TO_SIXTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents >= 0.7, $ehs : results.getEHS(), strategy == Strategy.MAKE1,
            actionToTake != null, actionToTake.isBetOrRaise(), results.getEHS() >= 0.5 && results.getEHS() < 0.6, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
        insert(new BettingEvent(HandStrengthEnum.FIFTY_TO_SIXTY, false));
end

rule "Process 50-60 betting event scenario 2"
    salience -100*phase
    no-loop
    when
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.FIFTY_TO_SIXTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.FIFTY_TO_SIXTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents < 0.7, $ehs: results.getEHS(), strategy == Strategy.MAKE1,
            actionToTake != null,  actionToTake.isBetOrRaise(), (results.getEHS() >= 0.5 && results.getEHS() < 0.6), gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        insert(new BettingEvent(HandStrengthEnum.FIFTY_TO_SIXTY, true));
end

/************** SEMI-BLUFFING **************/
rule "Pot odds for semi-bluffing calculation"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getBetsToCall(seat) == 0, $ourSeat: seat)
        $pfp: PostFlopParameters()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($pfp) {
            setPotOdds2(2 * gameInfo.getCurrentBetSize() / (gameInfo.getEligiblePot($ourSeat)+ 6 * gameInfo.getCurrentBetSize()))
        }
end

rule "Semi-Bluffing"
    salience -100*phase
    when
        $pfp: PostFlopParameters($semiBluffingFlag: semiBluffingFlag, $potOdds2: potOdds2)
        $ps: PlayerState(actionToTake == null, $ourSeat: seat, ($semiBluffingFlag == true ||
                                (gameInfo.getStage() != Holdem.RIVER && results.getPPot() >= $potOdds2)))
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(gameInfo.getBankRoll($ourSeat) <= gameInfo.getMinRaise() ?
                                                    Action.checkOrFoldAction(gameInfo): Action.betAction(gameInfo))
        }
        modify($pfp) {
            setSemiBluffingFlag(true)
        }
end

rule "Alternative for semi-bluffing try"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getBetsToCall(seat) == 0)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.checkAction())
        }
end

rule "Process 40-50 betting event scenario 1"
    salience -100*phase
    no-loop
    when
        $pfp: PostFlopParameters($semiBluffingFlag: semiBluffingFlag)
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.FORTY_TO_FIFTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.FORTY_TO_FIFTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents >= 0.5, $ehs : results.getEHS(), actionToTake != null,
            actionToTake.isBetOrRaise(), $semiBluffingFlag == true, results.getEHS() >= 0.4 && results.getEHS() < 0.5, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
        insert(new BettingEvent(HandStrengthEnum.FORTY_TO_FIFTY, false));
end

rule "Process 40-50 betting event scenario 2"
    salience -100*phase
    no-loop
    when
        $pfp: PostFlopParameters($semiBluffingFlag: semiBluffingFlag)
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.FORTY_TO_FIFTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.FORTY_TO_FIFTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents < 0.5, $ehs: results.getEHS(), actionToTake != null,
        actionToTake.isBetOrRaise(), $semiBluffingFlag == true, results.getEHS() >= 0.4 && results.getEHS() < 0.5, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        insert(new BettingEvent(HandStrengthEnum.FORTY_TO_FIFTY, true));
end

rule "Process 30-40 betting event scenario 1"
    salience -100*phase
    no-loop
    when
        $pfp: PostFlopParameters($semiBluffingFlag: semiBluffingFlag)
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.THIRTY_TO_FORTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.THIRTY_TO_FORTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents >= 0.3, $ehs: results.getEHS(), actionToTake != null,
            actionToTake.isBetOrRaise(), $semiBluffingFlag == true, results.getEHS() >= 0.3 && results.getEHS() < 0.4, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
        insert(new BettingEvent(HandStrengthEnum.THIRTY_TO_FORTY, false));
end

rule "Process 30-40 betting event scenario 2"
    salience -100*phase
    no-loop
    when
        $pfp:PostFlopParameters($semiBluffingFlag: semiBluffingFlag)
        $totalEvents: Number() from accumulate(
            $be: BettingEvent(
                handStrengthRange == HandStrengthEnum.THIRTY_TO_FORTY
            ),
            count($be)
        )
        $numOfEvents: Number() from accumulate(
            BettingEvent(
                handStrengthRange == HandStrengthEnum.THIRTY_TO_FORTY,
                betDone == true
            ),
            init(int numOfEvents = 0;),
            action(numOfEvents += 1;),
            result(numOfEvents)
        )
        $ps: PlayerState($numOfEvents / $totalEvents < 0.3, $ehs: results.getEHS(), actionToTake != null,
            actionToTake.isBetOrRaise(), $semiBluffingFlag == true, results.getEHS() >= 0.3 && results.getEHS() < 0.4, gameInfo.isPostFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        System.out.println("EHS: " + $ehs);
        insert(new BettingEvent(HandStrengthEnum.THIRTY_TO_FORTY, true));
end

/************** Calling With Pot Odds **************/
rule "Pot odds calculation"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
        $pfp: PostFlopParameters()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($pfp) {
            setPotOdds(gameInfo.getAmountToCall($ourSeat) / (gameInfo.getEligiblePot($ourSeat) + gameInfo.getAmountToCall($ourSeat)))
        }
end

rule "Calling with pot odds - scenario 1"
    salience -100*phase
    when
        $pfp: PostFlopParameters($potOdds: potOdds)
        $ps: PlayerState(actionToTake == null, results.getEHS() >= $potOdds, gameInfo.getStage() == Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Calling with pot odds - scenario 2"
    salience -100*phase
    when
        $pfp: PostFlopParameters($potOdds: potOdds)
        $ps: PlayerState(actionToTake == null, results.getPPot() >= $potOdds, gameInfo.getStage() != Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

/************** Calling With Showdown Odds **************/
rule "Fold river with showdown odds"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getStage() == Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Calculate showdown cost"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
        $pfp: PostFlopParameters()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($pfp) {
            setShowdownCost(gameInfo.getStage() == Holdem.FLOP ? gameInfo.getCurrentBetSize() * 4 : gameInfo.getCurrentBetSize())
        }
end

rule "Calculate showdown odds"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
        $pfp: PostFlopParameters($showdownCost: showdownCost)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($pfp) {
            setShowdownOdds((gameInfo.getAmountToCall($ourSeat) + $showdownCost) / (gameInfo.getEligiblePot($ourSeat)
                    + gameInfo.getAmountToCall($ourSeat) + 2 * $showdownCost))
        }
end

rule "Calling with showdown odds"
    salience -100*phase
    when
        $pfp: PostFlopParameters($showdownOdds: showdownOdds)
        $ps: PlayerState(actionToTake == null, results.getEHS() >= $showdownOdds)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Fold"
    salience -100*phase
    when
        $ps: PlayerState(actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.checkOrFoldAction(gameInfo))
        }
end
