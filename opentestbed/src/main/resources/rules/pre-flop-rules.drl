package rules

import com.biotools.meerkat.Card;
import com.biotools.meerkat.Action;
import com.biotools.meerkat.GameInfo;
import bots.rulebasedbot.Utility;
import bots.rulebasedbot.PlayerState;
import bots.rulebasedbot.PlayStyle;
import bots.rulebasedbot.Strategy;
import com.biotools.meerkat.Holdem;
import bots.rulebasedbot.Thresholds;

global Integer numOfPlayersToAct;
global Integer phase;
global GameInfo gameInfo;


rule "Determine suits"
    salience 100*phase
    when
        $ps: PlayerState($card1: card1, $card2: card2, $card1.getSuit() == $card2.getSuit(), actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setSameSuit(true)
        }
end

rule "Starting hand rank - number of players is 5+, cards have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers >= 5, sameSuit == true, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() > $card2.getRank() ? Utility.IR7.get($card1.getRank()).get($card2.getRank()) :
                            Utility.IR7.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Starting hand rank - number of players is 5+, cards do not have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers >= 5, sameSuit == false, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() < $card2.getRank() ? Utility.IR7.get($card1.getRank()).get($card2.getRank()) :
                                        Utility.IR7.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Starting hand rank - number of players is 3 or 4, cards have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 4, expectedNumOfPlayers > 2, sameSuit == true, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() > $card2.getRank() ? Utility.IR4.get($card1.getRank()).get($card2.getRank()) :
                            Utility.IR4.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Starting hand rank - number of players is 3 or 4, cards do not have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 4, expectedNumOfPlayers > 2, sameSuit == false, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() < $card2.getRank() ? Utility.IR4.get($card1.getRank()).get($card2.getRank()) :
                                        Utility.IR4.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Starting hand rank - number of players is 1 or 2, cards have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 2, sameSuit == true, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() > $card2.getRank() ? Utility.IR2.get($card1.getRank()).get($card2.getRank()) :
                            Utility.IR2.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Starting hand rank - number of players is 1 or 2, cards do not have same suit"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 2, sameSuit == false, $card1: card1, $card2: card2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setIR($card1.getRank() < $card2.getRank() ? Utility.IR2.get($card1.getRank()).get($card2.getRank()) :
                                        Utility.IR2.get($card2.getRank()).get($card1.getRank()))
        }
end

rule "Determine thresholds - tight and 1-2"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 2, playStyle == PlayStyle.TIGHT, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(-50 + 50 * numOfPlayersToAct),
            setCall2Threshold(150 + 50 * numOfPlayersToAct),
            setMake1Threshold(-50 + 50 * numOfPlayersToAct),
            setMake2Threshold(150 + 50 * numOfPlayersToAct),
            setMake4Threshold(300)
        }
end

rule "Determine thresholds - tight and 3-4"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 4, expectedNumOfPlayers > 2, playStyle == PlayStyle.TIGHT, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 50 + 50 * numOfPlayersToAct : -75),
            setCall2Threshold(!$smallBlind ? 200 + 50 * numOfPlayersToAct : 200),
            setMake1Threshold(50 + 50 * numOfPlayersToAct),
            setMake2Threshold(200 + 50 * numOfPlayersToAct),
            setMake4Threshold(580)
        }
end

rule "Determine thresholds - tight and 5+"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers >= 5, playStyle == PlayStyle.TIGHT, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 70 * numOfPlayersToAct : 0),
            setCall2Threshold(!$smallBlind ? 450 + 50 * numOfPlayersToAct : 450),
            setMake1Threshold(70 * numOfPlayersToAct),
            setMake2Threshold(450 + 50 * numOfPlayersToAct),
            setMake4Threshold(900)
        }
end

rule "Determine thresholds - moderate and 1-2"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 2, playStyle == PlayStyle.MODERATE, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(-50 + 50 * numOfPlayersToAct),
            setCall2Threshold(50 + 50 * numOfPlayersToAct),
            setMake1Threshold(-50 + 50 * numOfPlayersToAct),
            setMake2Threshold(50 + 50 * numOfPlayersToAct),
            setMake4Threshold(300)
        }
end

rule "Determine thresholds - moderate and 3-4"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 4, expectedNumOfPlayers > 2, playStyle == PlayStyle.MODERATE, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 50 + 25 * numOfPlayersToAct : -75),
            setCall2Threshold(!$smallBlind ? 200 + 25 * numOfPlayersToAct : 200),
            setMake1Threshold(50 + 25 * numOfPlayersToAct),
            setMake2Threshold(200 + 25 * numOfPlayersToAct),
            setMake4Threshold(580)
        }
end

rule "Determine thresholds - moderate and 5+"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers >= 5, playStyle == PlayStyle.MODERATE, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 50 * numOfPlayersToAct : 0),
            setCall2Threshold(!$smallBlind ? 450 + 25 * numOfPlayersToAct : 450),
            setMake1Threshold(50 * numOfPlayersToAct),
            setMake2Threshold(450 + 25 * numOfPlayersToAct),
            setMake4Threshold(900)
        }
end

rule "Determine thresholds - loose and 1-2"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 2, playStyle == PlayStyle.LOOSE, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(-50 + 50 * numOfPlayersToAct),
            setCall2Threshold(0),
            setMake1Threshold(-50 + 50 * numOfPlayersToAct),
            setMake2Threshold(0),
            setMake4Threshold(300)
        }
end

rule "Determine thresholds - loose and 3-4"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers <= 4, expectedNumOfPlayers > 2, playStyle == PlayStyle.LOOSE, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 50 + 10 * numOfPlayersToAct : -75),
            setCall2Threshold(!$smallBlind ? 200 + 10 * numOfPlayersToAct : 200),
            setMake1Threshold(50 + 10 * numOfPlayersToAct),
            setMake2Threshold(200 + 10 * numOfPlayersToAct),
            setMake4Threshold(580)
        }
end

rule "Determine thresholds - loose and 5+"
    salience 100*phase
    when
        $ps: PlayerState(expectedNumOfPlayers >= 5, playStyle == PlayStyle.LOOSE, $smallBlind: smallBlind, actionToTake == null)
        $thresholds: Thresholds()
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($thresholds) {
            setCall1Threshold(!$smallBlind ? 30 * numOfPlayersToAct : 0),
            setCall2Threshold(!$smallBlind ? 450 + 10 * numOfPlayersToAct : 450),
            setMake1Threshold(30 * numOfPlayersToAct),
            setMake2Threshold(450 + 10 * numOfPlayersToAct),
            setMake4Threshold(900)
        }
end

rule "Strategy MAKE4 pre-flop"
    salience 100*phase
    when
        $thresholds: Thresholds($make4Threshold: make4Threshold)
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, $IR: IR >= $make4Threshold)
    then
        modify($ps) {
            setStrategy(Strategy.MAKE4)
        }
end

rule "Strategy MAKE2 pre-flop"
    salience 100*phase
    when
        $thresholds: Thresholds($make2Threshold: make2Threshold)
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, $IR: IR >= $make2Threshold)
    then
        modify($ps) {
            setStrategy(Strategy.MAKE2)
        }
end

rule "Strategy CALL2 pre-flop"
    salience 100*phase
    when
        $thresholds: Thresholds($call2Threshold: call2Threshold)
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, $IR: IR >= $call2Threshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.CALL2)
        }
end

rule "Strategy MAKE1 pre-flop"
    salience 100*phase
    when
        $thresholds: Thresholds($make1Threshold: make1Threshold)
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, $IR: IR >= $make1Threshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.MAKE1)
        }
end

rule "Strategy CALL1 pre-flop"
    salience 100*phase
    when
        $thresholds: Thresholds($call1Threshold: call1Threshold)
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, $IR: IR >= $call1Threshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.CALL1)
        }
end

rule "Strategy MAKE0 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY)
    then
        modify($ps) {
            setStrategy(Strategy.MAKE0)
        }
end

rule "Determine action - strategy MAKE4 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE4, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.raiseAction(gameInfo, gameInfo.getCurrentBetSize() * 3))
        }
end

rule "Determine action - strategy MAKE2 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(gameInfo.getNumRaises() < 2 ? Action.raiseAction(gameInfo, gameInfo.getCurrentBetSize())
                : Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy CALL2 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.CALL2, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 1 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) >= 2, gameInfo.isCommitted(seat) == false,
            actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 2 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, actionToTake == null, gameInfo.getBetsToCall(seat) < 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 3 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getNumRaises() <= 1, gameInfo.isPreFlop() == true)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.raiseAction(gameInfo))
        }
end

rule "Determine action - strategy CALL1 - scenario 1 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) >= 2, actionToTake == null,
            gameInfo.isCommitted(seat) == false)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Determine action - strategy CALL1 - scenario 2 pre-flop"
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.CALL1, actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE0 pre-flop"
    no-loop
    salience 100*phase
    when
        $ps: PlayerState(strategy == Strategy.MAKE0 || actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.checkOrFoldAction(gameInfo))
        }
end
