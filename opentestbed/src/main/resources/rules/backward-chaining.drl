package rules

import com.biotools.meerkat.Card;
import com.biotools.meerkat.Action;
import com.biotools.meerkat.GameInfo;
import bots.rulebasedbot.Utility;
import bots.rulebasedbot.PlayerState;
import bots.rulebasedbot.PlayStyle;
import bots.rulebasedbot.Strategy;
import com.biotools.meerkat.Holdem;

global Integer make1Threshold;
global Integer make2Threshold;
global Integer make4Threshold;
global Integer call1Threshold;
global Integer call2Threshold;
global Integer numOfPlayersToAct;
global GameInfo gameInfo;


query preFlop()
    eval(gameInfo.isPreFlop())
end

query flop()
    eval(gameInfo.isFlop())
end

query lowBankroll(PlayerState ps)
    eval(gameInfo.getBankRoll(ps.getSeat()) <= 0.5)
end

query hasStrongHand(PlayerState ps)
    eval(ps.getIR() >= 150)
end

query playersInPot()
    eval(gameInfo.getNumActivePlayers() <= 3)
end

query hasNuts(PlayerState ps)
    eval(ps.getResults().getEHS() >= 0.75)
end


query isItTimeForAllIn(PlayerState ps)
    preFlop() and lowBankroll(ps;) and hasStrongHand(ps;)
end

query checkingNuts(PlayerState ps)
    flop() and playersInPot() and hasNuts(ps;)
end


rule "Go All In"
    agenda-group "backward"
    when
        $ps: PlayerState()
        isItTimeForAllIn($ps;)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.raiseAction(gameInfo, gameInfo.getBankRoll($ps.getSeat())))
        }
end

rule "Check flop nuts"
    agenda-group "backward"
    when
        $ps: PlayerState()
        checkingNuts($ps;)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end
