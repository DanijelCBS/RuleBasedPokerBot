package rules

import com.biotools.meerkat.Card;
import com.biotools.meerkat.Action;
import com.biotools.meerkat.GameInfo;
import bots.rulebasedbot.Utility;
import bots.rulebasedbot.PlayerState;
import bots.rulebasedbot.PlayStyle;
import bots.rulebasedbot.Strategy;
import com.biotools.meerkat.Holdem;

global Double make1PostFlopThreshold;
global Double make2PostFlopThreshold;
global Double potOdds;
global Double potOdds2;
global Boolean semiBluffingFlag;
global Double showdownCost;
global Double showdownOdds;
global GameInfo gameInfo;


rule "Calculate potentials and hand rank post-flop"
    when
        $ps: PlayerState($card1: card1, $card2: card2, !results.isCalculated())
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setResults(Utility.enumerateHands($card1, $card2, gameInfo))
        }
end

rule "Reset semi-bluffing flag post-flop"
    when
        $ps: PlayerState($card1: card1, $card2: card2, (gameInfo.getStage() == Holdem.FLOP || gameInfo.getBetsToCall(seat) > 0))
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("semiBluffingFlag", false);
end

rule "Strategy MAKE2 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, results.getEHS() >= make2PostFlopThreshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.MAKE2)
        }
end

rule "Strategy MAKE1 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.NO_STRATEGY, results.getEHS() >= make1PostFlopThreshold)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setStrategy(Strategy.MAKE1)
        }
end

rule "Determine action - strategy MAKE2 - scenario 1 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.MAKE2, gameInfo.getBetsToCall(seat) < 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.raiseAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE2 - scenario 2 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.MAKE2, gameInfo.getBetsToCall(seat) >= 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 1 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) >= 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 2 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, actionToTake == null, gameInfo.getBetsToCall(seat) < 2)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Determine action - strategy MAKE1 - scenario 3 post-flop"
    when
        $ps: PlayerState(strategy == Strategy.MAKE1, gameInfo.getBetsToCall(seat) == 0)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.betAction(gameInfo))
        }
end

/************** SEMI-BLUFFING **************/
rule "Pot odds for semi-bluffing calculation post-flop"
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getBetsToCall(seat) == 0, $ourSeat: seat)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("potOdds2", 2 * gameInfo.getCurrentBetSize() / (gameInfo
                                                    .getEligiblePot($ourSeat) + 6 * gameInfo.getCurrentBetSize()));
end

rule "Semi-Bluffing post-flop"
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat, (semiBluffingFlag == true ||
                                (gameInfo.getStage() != Holdem.RIVER && results.getPPot() >= potOdds2)))
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("semiBluffingFlag", true);
        modify($ps) {
            setActionToTake(gameInfo.getBankRoll($ourSeat) <= gameInfo.getMinRaise() ?
                                                    Action.checkOrFoldAction(gameInfo): Action.betAction(gameInfo))
        }
end

rule "Alternative for semi-bluffing try post-flop"
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getBetsToCall(seat) == 0)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.checkAction())
        }
end

/************** Calling With Pot Odds **************/
rule "Pot odds calculation post-flop"
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("potOdds", gameInfo.getAmountToCall($ourSeat) / (gameInfo
                                        .getEligiblePot($ourSeat) + gameInfo.getAmountToCall($ourSeat)));
end

rule "Calling with pot odds - scenario 1 post-flop"
    when
        $ps: PlayerState(actionToTake == null, results.getEHS() >= potOdds, gameInfo.getStage() == Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Calling with pot odds - scenario 2 post-flop"
    when
        $ps: PlayerState(actionToTake == null, results.getPPot() >= potOdds, gameInfo.getStage() != Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

/************** Calling With Showdown Odds **************/
rule "Fold river with showdown odds post-flop"
    when
        $ps: PlayerState(actionToTake == null, gameInfo.getStage() == Holdem.RIVER)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.foldAction(gameInfo))
        }
end

rule "Calculate showdown cost post-flop"
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("showdownCost", gameInfo.getStage() == Holdem.FLOP ?
                                                    gameInfo.getCurrentBetSize() * 4 : gameInfo.getCurrentBetSize());
end

rule "Calculate showdown odds post-flop"
    when
        $ps: PlayerState(actionToTake == null, $ourSeat: seat)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        drools.getKnowledgeRuntime().setGlobal("showdownOdds", (gameInfo.getAmountToCall($ourSeat) + showdownCost) /
                                                               (gameInfo.getEligiblePot($ourSeat) +
                                                                gameInfo.getAmountToCall($ourSeat) + 2 * showdownCost));
end

rule "Calling with showdown odds post-flop"
    when
        $ps: PlayerState(actionToTake == null, results.getEHS() >= showdownOdds)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.callAction(gameInfo))
        }
end

rule "Fold post-flop"
    when
        $ps: PlayerState(actionToTake == null)
    then
        System.out.println("Rule: " + drools.getRule().getName());
        modify($ps) {
            setActionToTake(Action.checkOrFoldAction(gameInfo))
        }
end
